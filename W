import cv2
import numpy as np
from PIL import Image, ImageEnhance, ImageFilter
import base64
import io

def enhance_document_edges(image_path, method='combined'):
    """
    Enhance document edges for better LLM detection
    Methods: 'contrast', 'edges', 'sharpen', 'combined'
    """
    
    if method == 'contrast':
        return enhance_contrast(image_path)
    elif method == 'edges':
        return add_edge_overlay(image_path)
    elif method == 'sharpen':
        return sharpen_image(image_path)
    elif method == 'combined':
        return combined_enhancement(image_path)

def enhance_contrast(image_path):
    """Boost contrast to make document boundaries more visible"""
    with Image.open(image_path) as img:
        # Convert to RGB if needed
        if img.mode != 'RGB':
            img = img.convert('RGB')
        
        # Enhance contrast
        enhancer = ImageEnhance.Contrast(img)
        img = enhancer.enhance(1.8)  # Increase contrast
        
        # Enhance sharpness
        enhancer = ImageEnhance.Sharpness(img)
        img = enhancer.enhance(2.0)  # Sharpen edges
        
        return pil_to_base64(img)

def add_edge_overlay(image_path):
    """Add edge detection overlay to highlight document boundaries"""
    # Read image with OpenCV
    img = cv2.imread(image_path)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    
    # Edge detection
    edges = cv2.Canny(gray, 50, 150, apertureSize=3)
    
    # Dilate edges to make them more prominent
    kernel = np.ones((2,2), np.uint8)
    edges = cv2.dilate(edges, kernel, iterations=1)
    
    # Convert edges to 3 channels
    edges_colored = cv2.cvtColor(edges, cv2.COLOR_GRAY2BGR)
    
    # Overlay edges on original image
    enhanced = cv2.addWeighted(img, 0.8, edges_colored, 0.4, 0)
    
    return opencv_to_base64(enhanced)

def sharpen_image(image_path):
    """Apply unsharp masking to enhance document edges"""
    with Image.open(image_path) as img:
        if img.mode != 'RGB':
            img = img.convert('RGB')
        
        # Apply unsharp mask
        img = img.filter(ImageFilter.UnsharpMask(radius=2, percent=150, threshold=3))
        
        return pil_to_base64(img)

def combined_enhancement(image_path):
    """Combine multiple enhancement techniques"""
    # Read with OpenCV for advanced processing
    img = cv2.imread(image_path)
    
    # 1. Noise reduction
    img = cv2.bilateralFilter(img, 9, 75, 75)
    
    # 2. Convert to LAB color space for better contrast
    lab = cv2.cvtColor(img, cv2.COLOR_BGR2LAB)
    l, a, b = cv2.split(lab)
    
    # Apply CLAHE (Contrast Limited Adaptive Histogram Equalization) to L channel
    clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8,8))
    l = clahe.apply(l)
    
    # Merge channels and convert back
    enhanced = cv2.merge([l, a, b])
    enhanced = cv2.cvtColor(enhanced, cv2.COLOR_LAB2BGR)
    
    # 3. Edge enhancement
    gray = cv2.cvtColor(enhanced, cv2.COLOR_BGR2GRAY)
    edges = cv2.Canny(gray, 30, 100)
    
    # 4. Morphological operations to connect edges
    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (3,3))
    edges = cv2.morphologyEx(edges, cv2.MORPH_CLOSE, kernel)
    
    # 5. Create edge mask and apply
    edges_3ch = cv2.cvtColor(edges, cv2.COLOR_GRAY2BGR)
    result = cv2.addWeighted(enhanced, 0.9, edges_3ch, 0.3, 0)
    
    return opencv_to_base64(result)

def create_high_contrast_version(image_path):
    """Create a high-contrast version specifically for document detection"""
    img = cv2.imread(image_path)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    
    # Apply adaptive threshold
    adaptive_thresh = cv2.adaptiveThreshold(gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, 
                                          cv2.THRESH_BINARY, 11, 2)
    
    # Find contours to identify potential document regions
    contours, _ = cv2.findContours(adaptive_thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # Draw contours on original image
    contour_img = img.copy()
    cv2.drawContours(contour_img, contours, -1, (0, 255, 0), 2)
    
    return opencv_to_base64(contour_img)

def pil_to_base64(img):
    """Convert PIL image to base64"""
    buffer = io.BytesIO()
    img.save(buffer, format='JPEG', quality=95)
    return base64.b64encode(buffer.getvalue()).decode('ascii')

def opencv_to_base64(img):
    """Convert OpenCV image to base64"""
    _, buffer = cv2.imencode('.jpg', img, [cv2.IMWRITE_JPEG_QUALITY, 95])
    return base64.b64encode(buffer).decode('ascii')

# Usage example
def process_for_llm_detection(image_path):
    """Process image with enhanced edges for LLM detection"""
    
    # Try different enhancement methods
    methods = ['contrast', 'combined', 'edges']
    
    for method in methods:
        print(f"Trying {method} enhancement...")
        
        # Enhance image
        enhanced_image = enhance_document_edges(image_path, method)
        
        # Your LLM detection prompt (improved)
        enhanced_prompt = """
        DOCUMENT DETECTION TASK:
        
        You are analyzing an enhanced image where document edges have been made more visible.
        
        Steps:
        1. Look for rectangular shapes with clear, defined edges
        2. Identify the shape that contains text, photos, or official formatting
        3. The document will appear as a distinct rectangular region
        4. Return precise bounding box coordinates
        
        Format: {"x1": <value>, "y1": <value>, "x2": <value>, "y2": <value>}
        
        CRITICAL: The image has been processed to make document edges more visible. 
        Look for the most prominent rectangular region with content.
        """
        
        # Call your LLM detection function here
        # result = completion_test(client, app_id, azure_token, enhanced_prompt, enhanced_image, label_name)
        
        print(f"Enhanced image ready for {method} method")
        
        # Return the best enhanced version
        if method == 'combined':  # Usually works best
            return enhanced_image, enhanced_prompt
    
    return enhanced_image, enhanced_prompt

# Quick test function
def save_enhanced_versions(image_path):
    """Save different enhanced versions for comparison"""
    methods = ['contrast', 'edges', 'sharpen', 'combined']
    
    for method in methods:
        enhanced_b64 = enhance_document_edges(image_path, method)
        
        # Convert back to save
        img_data = base64.b64decode(enhanced_b64)
        with open(f'enhanced_{method}.jpg', 'wb') as f:
            f.write(img_data)
        
        print(f"Saved enhanced_{method}.jpg")

import cv2
import numpy as np

def enhance_black_pixels(image_path, output_path="enhanced.jpg", darkness_threshold=150):
    """
    Simple function to make dark pixels (text) darker and more uniform
    
    Parameters:
    - image_path: path to input image
    - output_path: path to save enhanced image
    - darkness_threshold: pixels darker than this will be enhanced (0-255)
    """
    
    # Read image
    img = cv2.imread(image_path)
    
    # Convert to grayscale
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    
    # Find dark pixels (likely text)
    # Pixels below threshold are considered text
    mask = gray < darkness_threshold
    
    # Make dark pixels uniformly darker
    enhanced = gray.copy()
    enhanced[mask] = 0  # Make text pixels pure black
    
    # Optional: Make light pixels uniformly lighter (background)
    enhanced[~mask] = 255  # Make background pure white
    
    # Save result
    cv2.imwrite(output_path, enhanced)
    
    print(f"Enhanced image saved as: {output_path}")
    return enhanced


def enhance_black_pixels_gradual(image_path, output_path="enhanced_gradual.jpg", darkness_threshold=150):
    """
    Gradually darken pixels based on how dark they already are
    Better for maintaining some detail in characters
    """
    
    # Read image
    img = cv2.imread(image_path)
    
    # Convert to grayscale  
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    
    # Create enhanced image
    enhanced = gray.copy().astype(float)
    
    # Darken pixels that are already somewhat dark
    # The darker the pixel, the more we darken it
    for i in range(gray.shape[0]):
        for j in range(gray.shape[1]):
            pixel = gray[i, j]
            if pixel < darkness_threshold:
                # Make dark pixels much darker
                # Formula: darker pixels get multiplied by smaller factor
                factor = pixel / darkness_threshold
                enhanced[i, j] = pixel * factor * 0.3  # Multiply by 0.3 to make it darker
            else:
                # Keep light pixels light (background)
                enhanced[i, j] = 255
    
    # Convert back to uint8
    enhanced = np.clip(enhanced, 0, 255).astype(np.uint8)
    
    # Save result
    cv2.imwrite(output_path, enhanced)
    
    print(f"Enhanced image saved as: {output_path}")
    return enhanced


def simple_threshold(image_path, output_path="simple_threshold.jpg", threshold_value=127):
    """
    Simplest approach - just apply a threshold
    Everything darker than threshold becomes black, rest becomes white
    """
    
    # Read image
    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    
    # Apply simple threshold
    _, binary = cv2.threshold(img, threshold_value, 255, cv2.THRESH_BINARY)
    
    # Save result
    cv2.imwrite(output_path, binary)
    
    print(f"Thresholded image saved as: {output_path}")
    return binary


# Main execution
if __name__ == "__main__":
    # Your image path
    input_image = "id_card.jpg"
    
    # Method 1: Make all dark pixels pure black
    enhance_black_pixels(input_image, "enhanced_pure_black.jpg", darkness_threshold=150)
    
    # Method 2: Gradually darken based on current darkness
    enhance_black_pixels_gradual(input_image, "enhanced_gradual.jpg", darkness_threshold=150)
    
    # Method 3: Simple threshold
    simple_threshold(input_image, "enhanced_threshold.jpg", threshold_value=127)
    
    print("\nDone! Check the output images.")
    print("Adjust 'darkness_threshold' value (0-255) to capture more or less text.")

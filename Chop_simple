def apply_chop_transformations(chop_image):
    """Apply custom transformations with white background"""
    
    def rotate_image(img, angle):
        h, w = img.shape[:2]
        center = (w // 2, h // 2)
        matrix = cv2.getRotationMatrix2D(center, angle, 1.0)
        
        # Calculate new dimensions
        cos_val = abs(matrix[0, 0])
        sin_val = abs(matrix[0, 1])
        new_w = int((h * sin_val) + (w * cos_val))
        new_h = int((h * cos_val) + (w * sin_val))
        
        # Adjust translation
        matrix[0, 2] += (new_w / 2) - center[0]
        matrix[1, 2] += (new_h / 2) - center[1]
        
        # Create white background and rotate
        white_bg = np.full((new_h, new_w, 3), 255, dtype=np.uint8)
        rotated = cv2.warpAffine(img, matrix, (new_w, new_h), 
                                borderMode=cv2.BORDER_CONSTANT, borderValue=(255, 255, 255))
        return rotated
    
    result = chop_image.copy()
    
    # Apply transformations
    if random.random() < 0.8:  # Rotation
        angle = random.uniform(-15, 15)
        result = rotate_image(result, angle)
    
    if random.random() < 0.5:  # Vertical flip
        result = cv2.flip(result, 0)
    
    if random.random() < 0.7:  # Random scale
        scale = random.uniform(0.7, 1.3)
        h, w = result.shape[:2]
        new_h, new_w = int(h * scale), int(w * scale)
        result = cv2.resize(result, (new_w, new_h))
    
    if random.random() < 0.3:  # Gaussian blur
        ksize = random.choice([3, 5])
        result = cv2.GaussianBlur(result, (ksize, ksize), 0)
    
    if random.random() < 0.5:  # Brightness/contrast
        alpha = random.uniform(0.8, 1.2)  # contrast
        beta = random.randint(-20, 20)    # brightness
        result = cv2.convertScaleAbs(result, alpha=alpha, beta=beta)
    
    if random.random() < 0.2:  # Noise
        noise = np.random.normal(0, random.uniform(10, 30), result.shape).astype(np.uint8)
        result = cv2.add(result, noise)
    
    return result

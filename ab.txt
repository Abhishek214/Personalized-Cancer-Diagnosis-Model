# import pvt
import sys
import uvicorn
import urllib3
import platform
import subprocess
import os
import requests
import time

from fastapi import FastAPI, Request, WebSocket, Form, Header
from fastapi.middleware.cors import CORSMiddleware
from configurations.global_data import (set_global_data, get_all_global_data)
from utils import keepie_utils
from configurations.params import *
from model_utils.download_utils import download_models
from Auth.auth import secure
from routers.process_documents import visual_dcrest
from source.detection.model_load import load_model, get_model

# Suppress InsecureRequestsWarning
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

app = FastAPI(root_path="/dcrest-visual-extraction-service")

os.environ["TOKENIZERS_PARALLELISM"] = "false"
uname = platform.uname()

def get_uptime_millis():
    with open("/proc/uptime", "r") as f:
        uptime_seconds = float(f.readline().split()[0])
    return int(uptime_seconds * 1000)

def initialize_worker_models():
    """Initialize models in current worker"""
    worker_pid = os.getpid()
    try:
        print(f"Initializing models in worker {worker_pid}")
        
        # Check if model files exist
        if os.path.exists("/tmp/skku_slm_resnet50_vd_ocr99.pt.params"):
            model = get_model()
            if "session" not in model:
                load_model()
                print(f"Model loaded successfully in worker {worker_pid}")
            else:
                print(f"Model already loaded in worker {worker_pid}")
        else:
            print(f"Model files not found in worker {worker_pid}")
            
    except Exception as e:
        print(f"Error initializing worker {worker_pid}: {e}")

def initialize_all_workers():
    """Call initialization endpoint to hit all workers"""
    try:
        # Make multiple requests to ensure all workers are hit
        base_url = f"http://localhost:{port}"
        init_url = f"{base_url}/init-worker"
        
        print("Initializing all workers...")
        
        # Make enough requests to hit all workers (workers * 2 to be safe)
        for i in range(workers * 3):
            try:
                response = requests.get(init_url, timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    print(f"Initialized worker {data.get('worker_pid', 'unknown')}")
                time.sleep(0.1)  # Small delay between requests
            except Exception as e:
                print(f"Request {i+1} failed: {e}")
                
        print("Worker initialization complete")
        
    except Exception as e:
        print(f"Error initializing all workers: {e}")

uptime_millis = get_uptime_millis()
version = os.getenv("APP_VERSION")

@app.get("/init-worker", status_code=200, description="Initialize current worker")
def init_worker():
    """Endpoint to initialize the current worker - called multiple times to hit all workers"""
    worker_pid = os.getpid()
    
    # Initialize this worker
    initialize_worker_models()
    
    # Check if model is loaded
    model = get_model()
    model_status = "loaded" if "session" in model else "not_loaded"
    
    return {
        "worker_pid": worker_pid,
        "model_status": model_status,
        "message": f"Worker {worker_pid} initialized"
    }

@app.get("/health", status_code=200, description="Status report of api and system")
def health():
    return {
        "healthy": "true",
        "efimid": "9929948",
        "server": uname.node,
        "componentName": "dcrest-visual-extraction-service",
        "version": version,
        "description": "Description of this service",
        "sourceCodeRepoUrl": "https://alm-github.wellsfargo.com/abcd/dcrest-visual-extraction-service",
        "documentationUrl": "N/A",
        "apiSpecificationUrl": "https://dcrest-visual-extraction-service-url/openapi.json",
        "businessImpact": "This service has business impact",
        "runtime": {
            "name": "PYTHON",
            "version": sys.version
        },
        "uptimeInMillis": uptime_millis
    }

@app.get("/docs", include_in_schema=False)
async def custom_swagger_ui_html(req: Request):
    root_path = req.scope.get("root_path", "").rstrip("/")
    openapi_url = root_path + app.openapi_url
    return get_swagger_ui_html(
        openapi_url=openapi_url,
        title="visual_detection",
    )

@app.get("/ready", status_code=200, description="Status report of api and system")
def ready():
    # Check if model is loaded
    model = get_model()
    model_status = "loaded" if "session" in model else "not_loaded"
    worker_pid = os.getpid()
    
    return {
        "server": uname.node,
        "service_name": "dcrest-visual-extraction-service",
        "status": "alive",
        "worker_pid": worker_pid,
        "model_status": model_status
    }

@app.post("/secret-receipt", status_code=200, description="Getting the secret keys")
async def secret_receipt(secretName: str = Form(), secretValue: str = Form(), Content_Type: str = Header()):
    print("secretName : ", secretName)

    """
    Write data to config and initialize ALL workers
    """
    if secretName and secretValue:
        if secretName == "dcrestai-gb-dcrest-svc-aco-doctager-pwd":
            set_global_data("dcrestai-gb-dcrest-svc-aco-doctager-pwd", secretValue)
            print("Received password for dcrestai-gb-dcrest-svc-aco-doctager-pwd")

            if not os.path.exists("/tmp/skku_slm_resnet50_vd_ocr99.pt.params"):
                print("Downloading models...")
                download_models("dcrestai-gb-dcrest-svc-aco-doctager-pwd")
                print("Model download complete")
            else:
                print("File already downloaded. Skipping download_models()")

        # Check if we have all required secrets
        if "dcrestai-gb-dcrest-svc-aco-pwd" in get_all_global_data().keys():
            if "dcrestai-gb-svceco-doctage-pwd" in get_all_global_data().keys():
                print("All secrets received. Initializing all workers...")
                
                # Initialize current worker first
                initialize_worker_models()
                
                # Then initialize all other workers
                initialize_all_workers()
                
                print("All workers initialization triggered")

    # return the secret
    return secretName, secretValue

# Routers
app.include_router(secure)
app.include_router(visual_dcrest)

# Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

if __name__ == "__main__":
    print("no of workers", workers)
    uvicorn.run(
        "Application:app",
        host=host,
        port=port,
        log_level="debug",
        # debug=True,
        workers=workers,
        # ssl_keyfile=ssl_keyfile,
        # ssl_certfile=ssl_certfile,
        # reload=True
    )

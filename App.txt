def calculate_bbox_area(bbox):
    """
    Calculate the area of a bounding box.
    
    Args:
        bbox: List or tuple in format [xmin, ymin, xmax, ymax]
        
    Returns:
        float: Area of the bounding box
    """
    xmin, ymin, xmax, ymax = bbox
    width = max(0, xmax - xmin)
    height = max(0, ymax - ymin)
    return width * height

def calculate_iou(bbox1, bbox2):
    """
    Calculate Intersection over Union (IoU) of two bounding boxes.
    
    Args:
        bbox1: List or tuple in format [xmin, ymin, xmax, ymax]
        bbox2: List or tuple in format [xmin, ymin, xmax, ymax]
        
    Returns:
        float: IoU value between 0 and 1
    """
    x1_min, y1_min, x1_max, y1_max = bbox1
    x2_min, y2_min, x2_max, y2_max = bbox2
    
    # Calculate intersection coordinates
    inter_xmin = max(x1_min, x2_min)
    inter_ymin = max(y1_min, y2_min)
    inter_xmax = min(x1_max, x2_max)
    inter_ymax = min(y1_max, y2_max)
    
    # Check if there's any intersection
    if inter_xmin >= inter_xmax or inter_ymin >= inter_ymax:
        return 0.0
    
    # Calculate intersection area
    intersection_area = (inter_xmax - inter_xmin) * (inter_ymax - inter_ymin)
    
    # Calculate union area
    bbox1_area = calculate_bbox_area(bbox1)
    bbox2_area = calculate_bbox_area(bbox2)
    union_area = bbox1_area + bbox2_area - intersection_area
    
    # Avoid division by zero
    if union_area == 0:
        return 0.0
    
    return intersection_area / union_area

def remove_duplicate_detections(detections, iou_threshold=0.3, class_filter=None):
    """
    Remove duplicate detections by keeping the detection with the larger bounding box
    when IoU exceeds the threshold.
    
    Args:
        detections: List of detection dictionaries with 'class', 'bbox', 'score' keys
        iou_threshold: float, IoU threshold for considering detections as duplicates (default: 0.3)
        class_filter: str or None, only process detections of this class (e.g., 'signature')
        
    Returns:
        List: Filtered detections with duplicates removed
    """
    if not detections:
        return detections
    
    # Filter detections by class if specified
    if class_filter:
        target_detections = [det for det in detections if det['class'].lower() == class_filter.lower()]
        other_detections = [det for det in detections if det['class'].lower() != class_filter.lower()]
    else:
        target_detections = detections.copy()
        other_detections = []
    
    if len(target_detections) <= 1:
        return detections
    
    # Sort detections by area (largest first) to prioritize keeping larger boxes
    target_detections_with_area = []
    for det in target_detections:
        area = calculate_bbox_area(det['bbox'])
        target_detections_with_area.append((det, area))
    
    target_detections_with_area.sort(key=lambda x: x[1], reverse=True)
    
    # Keep track of detections to keep
    filtered_detections = []
    
    for i, (current_det, current_area) in enumerate(target_detections_with_area):
        is_duplicate = False
        
        # Check against all previously kept detections
        for kept_det in filtered_detections:
            iou = calculate_iou(current_det['bbox'], kept_det['bbox'])
            
            if iou > iou_threshold:
                # Current detection is a duplicate
                is_duplicate = True
                break
        
        # If not a duplicate, keep this detection
        if not is_duplicate:
            filtered_detections.append(current_det)
    
    # Combine filtered target detections with other class detections
    final_detections = filtered_detections + other_detections
    
    return final_detections

def remove_signature_duplicates(detections, iou_threshold=0.3):
    """
    Convenience function specifically for removing duplicate signature detections.
    
    Args:
        detections: List of detection dictionaries
        iou_threshold: float, IoU threshold for considering detections as duplicates
        
    Returns:
        List: Detections with duplicate signatures removed
    """
    return remove_duplicate_detections(detections, iou_threshold, class_filter='signature')

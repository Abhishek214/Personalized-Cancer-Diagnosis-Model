import cv2

def find_document_rectangle(image_path):
    # Read image
    img = cv2.imread(image_path)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    
    # Make light edges more visible
    # Apply threshold to create strong black/white contrast
    _, thresh = cv2.threshold(gray, 200, 255, cv2.THRESH_BINARY)
    
    # Find contours
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    
    # Look for rectangular contours (document-like)
    document_contour = None
    for contour in sorted(contours, key=cv2.contourArea, reverse=True):
        # Get approximate shape
        peri = cv2.arcLength(contour, True)
        approx = cv2.approxPolyDP(contour, 0.02 * peri, True)
        
        # Check if it's rectangular (4 corners) and big enough
        if len(approx) == 4 and cv2.contourArea(contour) > 10000:
            document_contour = contour
            break
    
    # If no rectangle found, use the biggest contour that's not too small
    if document_contour is None:
        for contour in sorted(contours, key=cv2.contourArea, reverse=True):
            if cv2.contourArea(contour) > 10000:  # Skip tiny contours
                document_contour = contour
                break
    
    if document_contour is not None:
        # Get rectangle coordinates
        x, y, w, h = cv2.boundingRect(document_contour)
        
        # Draw rectangle
        cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 0), 3)
        
        # Save result
        cv2.imwrite('result.jpg', img)
        
        print(f"Document found at: x={x}, y={y}, width={w}, height={h}")
        return img
    else:
        print("No document found")
        return img

# Use it
find_document_rectangle('your_image.jpg')
